#!/usr/bin/python3

import sys
import os
import git
import datetime

from yggdrasil import *
from ui_helpers import *

import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *

edges = list()

def shorthash(commit) :
    return str(commit)[0:5]

def shortmsg(commit) :
    return str(commit.message).split('\n',1)[0]

repodir = os.getcwd()
if len(sys.argv) == 2 :
    repodir = sys.argv[1]

print("git-3d has started for" + repodir)

# load git repository
repo = git.Repo(repodir)
assert not repo.bare

# load all commits
commit_list = list(repo.iter_commits())
commit_list.sort(key=lambda c: c.committed_datetime.timestamp())

print("Heads:")
heads = list()
for head in repo.heads :
    print(str(head))
    heads.append(str(head.commit))

print("Commit list:")
# create commit objects for these.
for c in commit_list :
    print(shorthash(c) + ": " + shortmsg(c))
    ygg_c = YggCommit(c)
    if str(c) in heads : # is head
        ygg_c.setColorFromString("DAC148")
    elif len(c.parents) == 2 : # is merge
        ygg_c.color = (1,1,1)
    elif len(c.parents) == 0 : # is initial
        ygg_c.color = (0,1,0)
    # append commit to node list
    nodes[str(c)] = ygg_c
    # log edges to parents
    for p in c.parents :
        edges.append((str(p), str(c)))



# generate graph, that is, select positions for the commits
# Starting from each head.
hc = 0
for head in heads :
    level = 0
    parallel = 0
    nodes[head].placeTree(hc, level, parallel)
    hc = hc + 1


print("Showing Graph:")
pygame.init()
pygame.display.set_mode((800, 800), DOUBLEBUF | OPENGL)
gluPerspective(90, 1, 0.1, 100)
glTranslatef(0,0, -10)
glRotatef(25, 2, 1, 0)

redraw = True

clock = pygame.time.Clock()
while True:
    clock.tick(30)
    redraw |= handle_pygame_events()
    if not redraw :
        continue

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    for node, ygg_c in nodes.items() :
        ygg_c.draw()

    glLineWidth(5)
    glBegin(GL_LINES)
    for edge in edges :
        for vertex in edge :
            glVertex3fv(nodes[vertex].position.toTuple())
    glEnd()
    pygame.display.flip()
    redraw = False
