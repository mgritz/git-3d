#!/usr/bin/python3

import sys
import os
import git
import datetime

import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *

edges = list()
nodes = dict()

campos = (0,0,-10)
def update_camera(event) :
    camchange = (0,0,0)
    dirchange = (0,0)
    redraw_required = False

    assert event.type == pygame.KEYDOWN
    if event.key == ord('a') :
        camchange = (-1,0,0)
    if event.key == ord('d') :
        camchange = (1,0,0)
    if event.key == ord('w') :
        camchange = (0,1,0)
    if event.key == ord('s') :
        camchange = (0,-1,0)
    if event.key == pygame.K_LCTRL :
        camchange = (0,0,-1)
    if event.key == pygame.K_LSHIFT :
        camchange = (0,0,1)
    if event.key == pygame.K_UP or event.key == ord('k'):
        dirchange = (0,5)
    if event.key == pygame.K_DOWN or event.key == ord('j'):
        dirchange = (0,-5)
    if event.key == pygame.K_LEFT or event.key == ord('h'):
        dirchange = (-5,0)
    if event.key == pygame.K_RIGHT or event.key == ord('l'):
        dirchange = (5,0)

    if camchange != (0,0,0) :
        redraw_required = True
        glTranslatef(camchange[0], camchange[1], camchange[2])
        campos[0] += camchange[0]
        campos[1] += camchange[1]
        campos[2] += camchange[2]
        print(campos)

    if dirchange != (0,0) :
        redraw_required = True
        # get view orientation
        a = (GLfloat * 16)()
        mvm = glGetFloatv(GL_MODELVIEW_MATRIX, a)
        look_v = (a[2], a[6], a[10])
        up_v = (a[1], a[5], a[9])
        right_v = (a[0], a[4], a[8])

        dirchange_v = dirchange[0]
        dirchange_h = dirchange[1]

        glRotatef(dirchange_v, right_v[0], right_v[1], right_v[2])
        glRotatef(dirchange_h, up_v[0], up_v[1], up_v[2])

        mvm = glGetFloatv(GL_MODELVIEW_MATRIX, a)
        look_v = (a[2], a[6], a[10])
        print(look_v)

    return redraw_required


def shorthash(commit) :
    return str(commit)[0:5]

def shortmsg(commit) :
    return str(commit.message).split('\n',1)[0]

repodir = os.getcwd()
if len(sys.argv) == 2 :
    repodir = sys.argv[1]

print("git-3d has started for" + repodir)

# load git repository
repo = git.Repo(repodir)
assert not repo.bare

# load all commits
commit_list = list(repo.iter_commits())
commit_list.sort(key=lambda c: c.committed_datetime.timestamp())
pos = 0

print("Heads:")
heads = list()
for head in repo.heads :
    print(str(head))
    heads.append(str(head.commit))

print("Commit list:")
for c in commit_list :
    print(shorthash(c) + ": " + shortmsg(c))
    ts = int(c.committed_datetime.timestamp())

    color = "#DAC148"
    if str(c) in heads :
        color = "#111111"

    nodes[str(c)] = (0, 0, pos)
    pos = pos + 1

# add edges between commits
for c in commit_list :
    for p in c.parents :
        edges.append((str(p), str(c)))

print("Showing Graph:")
pygame.init()
pygame.display.set_mode((800, 800), DOUBLEBUF | OPENGL)
gluPerspective(90, 1, 0.1, 100)
glTranslatef(0,0, -10)
glRotatef(25, 2, 1, 0)

campos = [0,0,-10]
redraw = True

clock = pygame.time.Clock()
while True:
    clock.tick(30)
    for event in pygame.event.get() :
        if event.type == pygame.QUIT :
            pygame.quit()
            quit()
        elif event.type == pygame.KEYDOWN :
            redraw = update_camera(event)

    if not redraw :
        continue

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glLineWidth(5)
    glBegin(GL_LINES)
    for edge in edges :
        for vertex in edge :
            glVertex3fv(nodes[vertex])
    glEnd()
    pygame.display.flip()
    redraw = False